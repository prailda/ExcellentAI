#РЕГЛАМЕНТ ПО ПРЕДОТВРАЩЕНИЮ ОШИБОК В VBA-ПРИЛОЖЕНИЯХ
1. Стратегия защитного программирования

Защитное программирование (defensive programming) – это подход, который предполагает, что все может пойти не по плану. Вместо того чтобы пытаться обработать ошибки после их возникновения, мы закладываем механизмы предотвращения ошибок на самых ранних этапах выполнения кода.

1.1 Использование Guard Clauses (защитных условий)

Guard Clauses – это условные выражения в начале процедуры, которые проверяют входные данные и условия выполнения кода, обеспечивая ранний выход при обнаружении проблем.

Public Function CalculateDiscount(ByVal Price As Variant, ByVal DiscountRate As Variant) As Double
    ' Guard Clauses - последовательные проверки с ранним возвратом
    
    ' Проверка на Nothing и Null
    If IsNull(Price) Or IsNull(DiscountRate) Then
        LogWarning "CalculateDiscount: Получены NULL параметры"
        CalculateDiscount = 0
        Exit Function
    End If
    
    ' Проверка на числовой тип
    If Not IsNumeric(Price) Then
        LogWarning "CalculateDiscount: Цена должна быть числом"
        CalculateDiscount = 0
        Exit Function
    End If
    
    If Not IsNumeric(DiscountRate) Then
        LogWarning "CalculateDiscount: Ставка скидки должна быть числом"
        CalculateDiscount = 0
        Exit Function
    End If
    
    ' Проверка на положительные значения
    If CDbl(Price) <= 0 Then
        LogWarning "CalculateDiscount: Цена должна быть положительным числом"
        CalculateDiscount = 0
        Exit Function
    End If
    
    ' Проверка на диапазон значений
    If CDbl(DiscountRate) < 0 Or CDbl(DiscountRate) > 1 Then
        LogWarning "CalculateDiscount: Ставка скидки должна быть в диапазоне 0-1"
        CalculateDiscount = 0
        Exit Function
    End If
    
    ' Только после всех проверок выполняем основной код
    CalculateDiscount = CDbl(Price) * CDbl(DiscountRate)
End Function

1.2 Централизация валидации через вспомогательный класс Guard

Для уменьшения дублирования кода и стандартизации проверок создадим класс Guard:

' Класс Guard для централизации проверок
Option Explicit

' Проверка на Nothing или Null
Public Function IsNullOrNothing(ByVal Value As Variant) As Boolean
    If IsObject(Value) Then
        IsNullOrNothing = (Value Is Nothing)
    Else
        IsNullOrNothing = IsNull(Value) Or IsEmpty(Value)
    End If
End Function

' Проверка строки на пустоту
Public Function IsNullOrEmpty(ByVal Text As Variant) As Boolean
    IsNullOrEmpty = IsNullOrNothing(Text) Or Len(Trim(CStr(Text))) = 0
End Function

' Проверка числа на диапазон
Public Function IsInRange(ByVal Value As Double, ByVal MinValue As Double, ByVal MaxValue As Double) As Boolean
    IsInRange = (Value >= MinValue And Value <= MaxValue)
End Function

' Проверка объекта на тип
Public Function IsOfType(ByVal Obj As Object, ByVal TypeName As String) As Boolean
    IsOfType = (TypeName(Obj) = TypeName)
End Function

' Проверка валидности рабочего листа
Public Function IsValidWorksheet(ByVal ws As Worksheet) As Boolean
    On Error Resume Next
    IsValidWorksheet = Not ws Is Nothing And Not ws.Name = ""
    On Error GoTo 0
End Function

Использование класса Guard делает основной код более чистым и читаемым:

Public Function CalculateDiscount(ByVal Price As Variant, ByVal DiscountRate As Variant) As Double
    Dim Guard As New Guard

    ' Более чистые проверки с использованием класса Guard
    If Guard.IsNullOrNothing(Price) Or Guard.IsNullOrNothing(DiscountRate) Then
        LogWarning "CalculateDiscount: Получены NULL параметры"
        CalculateDiscount = 0
        Exit Function
    End If
    
    If Not IsNumeric(Price) Or Not IsNumeric(DiscountRate) Then
        LogWarning "CalculateDiscount: Параметры должны быть числами"
        CalculateDiscount = 0
        Exit Function
    End If
    
    Dim dblPrice As Double, dblRate As Double
    dblPrice = CDbl(Price)
    dblRate = CDbl(DiscountRate)
    
    If dblPrice <= 0 Then
        LogWarning "CalculateDiscount: Цена должна быть положительным числом"
        CalculateDiscount = 0
        Exit Function
    End If
    
    If Not Guard.IsInRange(dblRate, 0, 1) Then
        LogWarning "CalculateDiscount: Ставка скидки должна быть в диапазоне 0-1"
        CalculateDiscount = 0
        Exit Function
    End If
    
    CalculateDiscount = dblPrice * dblRate
End Function

2. Строгая типизация и эффективная работа с данными

2.1 Использование Option Explicit и явное указание типов

Всегда включайте Option Explicit в начале каждого модуля и явно указывайте типы всех переменных:

Option Explicit

Private Sub ProcessOrder(ByVal OrderID As Long, ByVal CustomerID As String)
    Dim OrderDate As Date
    Dim TotalAmount As Currency
    Dim ItemCount As Integer
    Dim IsDiscounted As Boolean
    
    ' Предпочтительнее объявлять переменные где они используются
    Dim OrderItem As OrderItem
    Set OrderItem = New OrderItem
    
    ' Остальной код...
End Sub

2.2 Типобезопасные коллекции и преобразования

Создавайте вспомогательные функции для безопасного преобразования типов:

' Безопасное преобразование в Long
Public Function SafeLong(ByVal Value As Variant) As Long
    On Error Resume Next
    If IsNumeric(Value) Then
        SafeLong = CLng(Value)
    Else
        SafeLong = 0
    End If
    On Error GoTo 0
End Function

' Безопасное преобразование в Date
Public Function SafeDate(ByVal Value As Variant) As Date
    On Error Resume Next
    If IsDate(Value) Then
        SafeDate = CDate(Value)
    Else
        SafeDate = DateSerial(1900, 1, 1) ' Дата по умолчанию
    End If
    On Error GoTo 0
End Function

2.3 Сильная инкапсуляция с использованием Private Types

' Класс Customer с сильной инкапсуляцией
Option Explicit

Private Type TCustomer
    ID As String
    Name As String
    Email As String
    IsActive As Boolean
    CreditLimit As Currency
    LastOrderDate As Date
End Type

Private This As TCustomer

' Свойства с валидацией при установке
Public Property Get ID() As String
    ID = This.ID
End Property

Public Property Let ID(ByVal Value As String)
    ' Проверка формата ID
    If Len(Value) <> 10 Or Not IsAlphaNumeric(Value) Then
        Err.Raise 5, "Customer.ID", "ID должен быть 10-символьной буквенно-цифровой строкой"
    End If
    This.ID = Value
End Property

Public Property Get Email() As String
    Email = This.Email
End Property

Public Property Let Email(ByVal Value As String)
    ' Проверка формата Email
    If Not IsValidEmail(Value) Then
        Err.Raise 5, "Customer.Email", "Некорректный формат email"
    End If
    This.Email = Value
End Property

' Вспомогательная функция проверки email
Private Function IsValidEmail(ByVal Email As String) As Boolean
    ' Простая проверка на наличие @ и .
    IsValidEmail = InStr(Email, "@") > 0 And InStr(Email, ".") > InStr(Email, "@")
End Function

' Вспомогательная функция проверки буквенно-цифровой строки
Private Function IsAlphaNumeric(ByVal Text As String) As Boolean
    Dim i As Integer
    For i = 1 To Len(Text)
        Dim Char As String
        Char = Mid(Text, i, 1)
        If Not (Char Like "[A-Za-z0-9]") Then
            IsAlphaNumeric = False
            Exit Function
        End If
    Next i
    IsAlphaNumeric = True
End Function

3. Структурирование сложных операций

3.1 Разбиение сложных процедур на более мелкие

Вместо одной большой процедуры с множеством проверок:

' Плохой пример: слишком длинная процедура с множеством проверок
Public Sub ProcessOrder(ByVal OrderID As Long)
    ' Много строк кода с проверками...
    ' Сложно отследить логику и ошибки
End Sub

Разбейте на более мелкие функциональные блоки:

' Хороший пример: структурированная процедура с делегированием
Public Sub ProcessOrder(ByVal OrderID As Long)
    ' Проверяем существование и валидность заказа
    If Not IsOrderValid(OrderID) Then Exit Sub
    
    ' Получаем данные заказа
    Dim OrderData As OrderData
    If Not TryGetOrderData(OrderID, OrderData) Then Exit Sub
    
    ' Обрабатываем товары заказа
    If Not ProcessOrderItems(OrderData) Then Exit Sub
    
    ' Обновляем статус заказа
    UpdateOrderStatus OrderID, OrderStatusProcessed
    
    ' Отправляем уведомление
    SendOrderNotification OrderID
End Sub

' Отдельные функции для каждого шага процесса
Private Function IsOrderValid(ByVal OrderID As Long) As Boolean
    ' Логика проверки...
End Function

Private Function TryGetOrderData(ByVal OrderID As Long, ByRef OutData As OrderData) As Boolean
    ' Логика получения данных...
End Function

Private Function ProcessOrderItems(ByVal Data As OrderData) As Boolean
    ' Логика обработки товаров...
End Function

3.2 Использование конечных автоматов для сложных процессов

Для процессов с множеством состояний используйте подход конечного автомата:

' Перечисление состояний процесса
Public Enum OrderProcessState
    ValidationState = 1
    ProcessingState = 2
    CompletionState = 3
    ErrorState = 4
End Enum

' Функция обработки на основе состояний
Public Function ProcessOrderWithStatePattern(ByVal OrderID As Long) As Boolean
    Dim CurrentState As OrderProcessState
    CurrentState = ValidationState
    
    Dim Success As Boolean
    Success = True
    
    While Success And CurrentState <> ErrorState And CurrentState <> CompletionState
        Select Case CurrentState
            Case ValidationState
                Success = ValidateOrderState(OrderID)
                If Success Then CurrentState = ProcessingState
                
            Case ProcessingState
                Success = ExecuteOrderProcessing(OrderID)
                If Success Then CurrentState = CompletionState
                
            Case Else
                Success = False
                CurrentState = ErrorState
        End Select
    Wend
    
    ProcessOrderWithStatePattern = (CurrentState = CompletionState)
End Function

4. Контрактное программирование

4.1 Предусловия, постусловия и инварианты

Контрактное программирование формализует ожидания от каждой процедуры:

' Функция с четкими контрактами
Public Function DivideValues(ByVal Dividend As Double, ByVal Divisor As Double) As Double
    ' Предусловия - проверяем входные данные
    Debug.Assert Not IsNull(Dividend) ' Проверка в режиме отладки
    Debug.Assert Not IsNull(Divisor)
    
    If Divisor = 0 Then
        Err.Raise 11, "DivideValues", "Деление на ноль недопустимо"
    End If
    
    ' Основной код
    Dim Result As Double
    Result = Dividend / Divisor
    
    ' Постусловия - проверяем результаты
    Debug.Assert Not IsNull(Result) ' Проверка в режиме отладки
    
    DivideValues = Result
End Function

4.2 Документирование контрактов

Добавляйте подробные комментарии, описывающие ожидаемые входные и выходные данные:

'@Description "Вычисляет сумму платежа на основе суммы заказа и ставки налога"
'@Precondition OrderAmount > 0
'@Precondition TaxRate >= 0 And TaxRate <= 0.5
'@Returns Сумма платежа с учетом налога
Public Function CalculatePaymentAmount(ByVal OrderAmount As Currency, ByVal TaxRate As Double) As Currency
    ' Guard clauses, реализующие предусловия
    If OrderAmount <= 0 Then
        Err.Raise 5, "CalculatePaymentAmount", "Сумма заказа должна быть положительной"
    End If
    
    If TaxRate < 0 Or TaxRate > 0.5 Then
        Err.Raise 5, "CalculatePaymentAmount", "Ставка налога должна быть в диапазоне 0-0.5"
    End If
    
    ' Расчет суммы платежа
    CalculatePaymentAmount = OrderAmount * (1 + TaxRate)
End Function

5. Профилактическое тестирование

5.1 Интеграция тестирования в процесс разработки

Создавайте тестовые процедуры одновременно с кодом:

' Тестовая процедура для функции CalculateDiscount
Public Sub TestCalculateDiscount()
    Dim Result As Double
    
    ' Тест корректных значений
    Result = CalculateDiscount(100, 0.2)
    Debug.Assert Result = 20
    
    ' Тест нулевой скидки
    Result = CalculateDiscount(100, 0)
    Debug.Assert Result = 0
    
    ' Тест нулевой цены
    Result = CalculateDiscount(0, 0.2)
    Debug.Assert Result = 0
    
    ' Тест отрицательной цены (должен вернуть 0)
    Result = CalculateDiscount(-100, 0.2)
    Debug.Assert Result = 0
    
    ' Тест некорректной скидки (должен вернуть 0)
    Result = CalculateDiscount(100, 1.5)
    Debug.Assert Result = 0
    
    Debug.Print "TestCalculateDiscount: Все тесты пройдены успешно"
End Sub

5.2 Тестирование граничных условий

' Тестирование граничных условий для функции CalculateDiscount
Public Sub TestCalculateDiscountBoundaries()
    Dim Result As Double
    
    ' Тест минимальной цены
    Result = CalculateDiscount(0.01, 0.2)
    Debug.Assert Result = 0.002
    
    ' Тест максимальной скидки
    Result = CalculateDiscount(100, 1)
    Debug.Assert Result = 100
    
    ' Тест минимальной скидки
    Result = CalculateDiscount(100, 0)
    Debug.Assert Result = 0
    
    Debug.Print "TestCalculateDiscountBoundaries: Все тесты пройдены успешно"
End Sub

6. Практические рекомендации для сложных проектов

6.1 Создание шаблонов для новых компонентов

Разработайте стандартные шаблоны модулей и классов, включающие базовую защитную логику:

'@Template "Стандартный шаблон модуля"
Option Explicit

' Константы модуля
Private Const MODULE_NAME As String = "ModuleName"

' Инициализация модуля
Private Sub InitializeModule()
    On Error GoTo ErrorHandler
    
    ' Код инициализации...
    
    Exit Sub
    
ErrorHandler:
    LogError Err.Number, Err.Description, MODULE_NAME & ".InitializeModule", Erl
End Sub

' Шаблон публичной процедуры с базовой защитной логикой
Public Function TemplateFunction(ByVal Parameter1 As String, ByVal Parameter2 As Long) As Boolean
    On Error GoTo ErrorHandler
    
    ' Guard clauses
    If Len(Trim(Parameter1)) = 0 Then
        LogWarning MODULE_NAME & ".TemplateFunction: Parameter1 не может быть пустым"
        TemplateFunction = False
        Exit Function
    End If
    
    If Parameter2 <= 0 Then
        LogWarning MODULE_NAME & ".TemplateFunction: Parameter2 должен быть положительным"
        TemplateFunction = False
        Exit Function
    End If
    
    ' Основной код...
    TemplateFunction = True
    
    Exit Function
    
ErrorHandler:
    LogError Err.Number, Err.Description, MODULE_NAME & ".TemplateFunction", Erl
    TemplateFunction = False
End Function

6.2 Автоматический аудит кода

Внедрите регулярные проверки кода на соответствие стандартам защитного программирования:

Проверка наличия Option Explicit во всех модулях
Проверка объявления типов всех переменных
Проверка наличия обработки ошибок во всех публичных процедурах
Проверка проверок входных параметров в начале процедур

Заключение

Предотвращение ошибок – это системный подход, который должен применяться на всех этапах разработки VBA-приложений. Правильно реализованное защитное программирование значительно снижает количество потенциальных ошибок и упрощает отладку и сопровождение кода.

Основные принципы:

1. Не доверяйте входным данным – всегда проверяйте их
2. Используйте ранние возвраты из функций при обнаружении проблем (guard clauses)
3. Создавайте централизованные механизмы валидации
4. Разделяйте сложную логику на маленькие, специализированные функции
5. Интегрируйте тестирование в процесс разработки
6. Используйте строгую типизацию и сильную инкапсуляцию
7. Документируйте контракты функций
