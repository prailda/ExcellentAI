#РЕГЛАМЕНТ ПО ПОЭТАПНОЙ РАЗРАБОТКЕ ПРИЛОЖЕНИЙ VBA

Введение: проблема "монолитного" подхода к разработке

Распространенная ошибка при создании VBA-приложений — попытка построить финальную версию всей системы сразу. Этот подход создает серьезные проблемы:

1. Избыточные абстракции без доказанной необходимости
2. Сложные интерфейсы между непротестированными компонентами
3. Запутанный код, который сложно отлаживать
4. Невозможность проверить ключевую функциональность на ранних этапах

Гораздо эффективнее использовать итеративный подход, когда приложение строится поэтапно — от простого к сложному, с постоянным тестированием и возможностью быстрого получения обратной связи.

Фаза 1: Минимальная рабочая инфраструктура

Шаг 1: Определите ключевые потребности и создайте прототип

Вместо того, чтобы сразу строить масштабную архитектуру, создайте минимальную работающую версию ключевой функциональности.

Пример: Если вы создаете приложение для анализа данных, начните с простой процедуры, которая:

Загружает тестовый набор данных
Выполняет базовый анализ
Выводит результат

' Первичный прототип основной функциональности
Sub AnalyzeData()
    ' Прямой код без абстракций для проверки концепции
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Sheets("TestData")
    
    ' Простой алгоритм для подтверждения подхода
    Dim total As Double
    Dim i As Long
    For i = 2 To 10  ' Проверка на ограниченном наборе данных
        total = total + ws.Cells(i, 2).Value
    Next i
    
    ' Вывод результата для немедленной проверки
    MsgBox "Сумма: " & total
End Sub

Ключевой момент: На этом этапе не стоит беспокоиться об элегантности кода — фокус на подтверждении правильности базового подхода.

Шаг 2: Добавьте базовую обработку ошибок

После того как прототип работает, добавьте базовую обработку ошибок, которая защитит от наиболее критичных проблем.

Sub AnalyzeData()
    On Error GoTo ErrorHandler
    
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Sheets("TestData")
    If ws Is Nothing Then
        MsgBox "Лист TestData не найден"
        Exit Sub
    End If
    
    Dim total As Double
    Dim i As Long
    For i = 2 To 10
        If IsNumeric(ws.Cells(i, 2).Value) Then
            total = total + ws.Cells(i, 2).Value
        End If
    Next i
    
    MsgBox "Сумма: " & total
    Exit Sub
    
ErrorHandler:
    MsgBox "Произошла ошибка: " & Err.Description
End Sub

Шаг 3: Создайте базовый модуль для логирования

Как только базовая функциональность подтверждена, создайте простой модуль логирования — это первый вспомогательный компонент, который существенно облегчит отладку.

' Модуль Logger.bas
Option Explicit

' Простая процедура логирования без избыточных абстракций
Public Sub LogMessage(ByVal Message As String, Optional ByVal Source As String = "")
    Dim logSheet As Worksheet
    
    ' Проверка наличия листа для логов
    On Error Resume Next
    Set logSheet = ThisWorkbook.Sheets("Log")
    If logSheet Is Nothing Then
        Set logSheet = ThisWorkbook.Sheets.Add
        logSheet.Name = "Log"
        logSheet.Cells(1, 1).Value = "Время"
        logSheet.Cells(1, 2).Value = "Источник"
        logSheet.Cells(1, 3).Value = "Сообщение"
    End If
    On Error GoTo 0
    
    ' Запись сообщения
    Dim newRow As Long
    newRow = logSheet.Cells(logSheet.Rows.Count, 1).End(xlUp).Row + 1
    
    logSheet.Cells(newRow, 1).Value = Now
    logSheet.Cells(newRow, 2).Value = Source
    logSheet.Cells(newRow, 3).Value = Message
End Sub

Шаг 4: Улучшите основную процедуру, используя логирование

Модифицируйте основную функцию, чтобы использовать созданный модуль логирования:

Sub AnalyzeData()
    On Error GoTo ErrorHandler
    
    LogMessage "Начало анализа данных", "AnalyzeData"
    
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Sheets("TestData")
    If ws Is Nothing Then
        LogMessage "Лист TestData не найден", "AnalyzeData"
        MsgBox "Лист TestData не найден"
        Exit Sub
    End If
    
    Dim total As Double
    Dim i As Long
    For i = 2 To 10
        If IsNumeric(ws.Cells(i, 2).Value) Then
            total = total + ws.Cells(i, 2).Value
        Else
            LogMessage "Нечисловое значение в ячейке " & ws.Cells(i, 2).Address, "AnalyzeData"
        End If
    Next i
    
    LogMessage "Анализ завершен. Сумма: " & total, "AnalyzeData"
    MsgBox "Сумма: " & total
    Exit Sub
    
ErrorHandler:
    LogMessage "Ошибка: " & Err.Description, "AnalyzeData"
    MsgBox "Произошла ошибка: " & Err.Description
End Sub

Критерии завершения Фазы 1

Основная функциональность работает и протестирована
Базовая обработка ошибок предотвращает критические сбои
Простое логирование облегчает отладку
Нет избыточных абстракций или сложных интерфейсов

Фаза 2: Выделение основных модулей и классов

После того как базовая функциональность подтверждена, можно начать структурировать код, не рискуя создать ненужные абстракции.

Шаг 1: Определите границы ответственности

Проанализируйте работающий прототип и определите логические группы функциональности:

Работа с данными (чтение, валидация)
Бизнес-логика (анализ, расчеты)
Представление (вывод результатов)

Шаг 2: Выделите модуль для работы с данными

' Модуль DataAccess.bas
Option Explicit

' Функция для загрузки данных - пока без сложных абстракций
Public Function LoadDataFromSheet(ByVal SheetName As String, _
                                 ByVal StartRow As Long, _
                                 ByVal EndRow As Long, _
                                 ByVal DataColumn As Long) As Variant
    On Error GoTo ErrorHandler
    
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Sheets(SheetName)
    
    Dim values() As Variant
    ReDim values(EndRow - StartRow)
    
    Dim i As Long, index As Long
    index = 0
    For i = StartRow To EndRow
        values(index) = ws.Cells(i, DataColumn).Value
        index = index + 1
    Next i
    
    LoadDataFromSheet = values
    Exit Function
    
ErrorHandler:
    LogMessage "Ошибка при загрузке данных: " & Err.Description, "DataAccess.LoadDataFromSheet"
    LoadDataFromSheet = Empty
End Function

Шаг 3: Выделите модуль для бизнес-логики

' Модуль DataAnalysis.bas
Option Explicit

' Функция для простого анализа - сначала только базовая логика
Public Function CalculateTotal(ByVal DataArray As Variant) As Double
    On Error GoTo ErrorHandler
    
    Dim total As Double
    Dim i As Long
    
    For i = LBound(DataArray) To UBound(DataArray)
        If IsNumeric(DataArray(i)) Then
            total = total + DataArray(i)
        Else
            LogMessage "Пропущено нечисловое значение: " & DataArray(i), "DataAnalysis.CalculateTotal"
        End If
    Next i
    
    CalculateTotal = total
    Exit Function
    
ErrorHandler:
    LogMessage "Ошибка при расчете: " & Err.Description, "DataAnalysis.CalculateTotal"
    CalculateTotal = 0
End Function

Шаг 4: Обновите основную процедуру для использования модулей

Sub AnalyzeData()
    On Error GoTo ErrorHandler
    
    LogMessage "Начало анализа данных", "AnalyzeData"
    
    ' Использование выделенных модулей
    Dim data As Variant
    data = LoadDataFromSheet("TestData", 2, 10, 2)
    
    If Not IsArray(data) Then
        LogMessage "Не удалось загрузить данные", "AnalyzeData"
        MsgBox "Не удалось загрузить данные"
        Exit Sub
    End If
    
    Dim total As Double
    total = CalculateTotal(data)
    
    LogMessage "Анализ завершен. Сумма: " & total, "AnalyzeData"
    MsgBox "Сумма: " & total
    Exit Sub
    
ErrorHandler:
    LogMessage "Ошибка: " & Err.Description, "AnalyzeData"
    MsgBox "Произошла ошибка: " & Err.Description
End Sub

Шаг 5: Создайте простой класс для хранения данных

Только после подтверждения работы модулей можно создать класс для представления данных:

' Класс DataItem.cls
Option Explicit

' Начните с минимума свойств, которые точно необходимы
Private mValue As Variant
Private mIsValid As Boolean

' Инициализация через стандартный метод
Public Function Create(ByVal Value As Variant) As DataItem
    mValue = Value
    mIsValid = IsNumeric(Value)
    
    Set Create = Me
End Function

' Свойства доступа к данным
Public Property Get Value() As Variant
    Value = mValue
End Property

Public Property Get IsValid() As Boolean
    IsValid = mIsValid
End Property

Шаг 6: Улучшите модуль DataAccess для использования класса

' Обновление модуля DataAccess.bas
Public Function LoadDataItems(ByVal SheetName As String, _
                             ByVal StartRow As Long, _
                             ByVal EndRow As Long, _
                             ByVal DataColumn As Long) As Collection
    On Error GoTo ErrorHandler
    
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Sheets(SheetName)
    
    Dim items As New Collection
    
    Dim i As Long
    For i = StartRow To EndRow
        Dim item As New DataItem
        Set item = item.Create(ws.Cells(i, DataColumn).Value)
        items.Add item
    Next i
    
    Set LoadDataItems = items
    Exit Function
    
ErrorHandler:
    LogMessage "Ошибка при загрузке данных: " & Err.Description, "DataAccess.LoadDataItems"
    Set LoadDataItems = New Collection
End Function

Критерии завершения Фазы 2

Код разделен на логические модули с четкими границами ответственности
Каждый модуль выполняет одну конкретную задачу
Базовые классы созданы и используются для организации данных
Каждый компонент протестирован по отдельности
Вся система протестирована в целом

Фаза 3: Расширение функциональности и улучшение архитектуры

После создания и тестирования базовой структуры приложения можно приступать к расширению функциональности и улучшению архитектуры.

Шаг 1: Улучшите обработку ошибок и создайте централизованный обработчик

' Модуль ErrorHandler.bas
Option Explicit

' Константы для кодов ошибок
Public Const ERR_DATA_NOT_FOUND As Long = 10001
Public Const ERR_INVALID_DATA As Long = 10002

' Централизованная обработка ошибок
Public Sub HandleError(ByVal ErrorNumber As Long, _
                      ByVal ErrorDesc As String, _
                      ByVal SourceName As String, _
                      Optional ByVal ShowUser As Boolean = True)
    ' Логирование ошибки
    Dim errorMsg As String
    errorMsg = "Ошибка #" & ErrorNumber & ": " & ErrorDesc & " в " & SourceName
    
    LogMessage errorMsg, "ErrorHandler"
    
    ' Отображение ошибки пользователю, если необходимо
    If ShowUser Then
        MsgBox errorMsg, vbExclamation, "Ошибка приложения"
    End If
End Sub

Шаг 2: Улучшите логгер, добавив уровни логирования

' Обновление модуля Logger.bas
Option Explicit

' Добавляем типы сообщений
Public Enum LogLevel
    LogInfo = 1
    LogWarning = 2
    LogError = 3
End Enum

' Улучшенная версия процедуры логирования
Public Sub LogMessage(ByVal Message As String, _
                     Optional ByVal Source As String = "", _
                     Optional ByVal Level As LogLevel = LogInfo)
    Dim logSheet As Worksheet
    
    On Error Resume Next
    Set logSheet = ThisWorkbook.Sheets("Log")
    If logSheet Is Nothing Then
        Set logSheet = ThisWorkbook.Sheets.Add
        logSheet.Name = "Log"
        logSheet.Cells(1, 1).Value = "Время"
        logSheet.Cells(1, 2).Value = "Уровень"
        logSheet.Cells(1, 3).Value = "Источник"
        logSheet.Cells(1, 4).Value = "Сообщение"
    End If
    On Error GoTo 0
    
    ' Получение текста уровня логирования
    Dim levelText As String
    Select Case Level
        Case LogInfo
            levelText = "ИНФО"
        Case LogWarning
            levelText = "ПРЕДУПР"
        Case LogError
            levelText = "ОШИБКА"
    End Select
    
    ' Запись сообщения
    Dim newRow As Long
    newRow = logSheet.Cells(logSheet.Rows.Count, 1).End(xlUp).Row + 1
    
    logSheet.Cells(newRow, 1).Value = Now
    logSheet.Cells(newRow, 2).Value = levelText
    logSheet.Cells(newRow, 3).Value = Source
    logSheet.Cells(newRow, 4).Value = Message
End Sub

Шаг 3: Добавьте класс для конфигурации приложения

' Класс AppConfig.cls
Option Explicit

' Постепенно добавляем нужные свойства
Private mDataSheetName As String
Private mStartRow As Long
Private mEndRow As Long
Private mDataColumn As Long
Private mLogEnabled As Boolean

' Инициализация с значениями по умолчанию
Private Sub Class_Initialize()
    mDataSheetName = "TestData"
    mStartRow = 2
    mEndRow = 10
    mDataColumn = 2
    mLogEnabled = True
End Sub

' Метод для загрузки настроек из ячеек или внешнего источника
Public Function LoadSettings() As Boolean
    On Error GoTo ErrorHandler
    
    ' Пока используем простой подход - загрузка из фиксированного листа
    Dim configSheet As Worksheet
    On Error Resume Next
    Set configSheet = ThisWorkbook.Sheets("Config")
    On Error GoTo 0
    
    If Not configSheet Is Nothing Then
        ' Если лист существует, загружаем настройки
        mDataSheetName = GetConfigValue(configSheet, "DataSheetName", mDataSheetName)
        mStartRow = GetConfigValue(configSheet, "StartRow", mStartRow)
        mEndRow = GetConfigValue(configSheet, "EndRow", mEndRow)
        mDataColumn = GetConfigValue(configSheet, "DataColumn", mDataColumn)
        mLogEnabled = GetConfigValue(configSheet, "LogEnabled", mLogEnabled)
    End If
    
    LoadSettings = True
    Exit Function
    
ErrorHandler:
    LogMessage "Ошибка при загрузке настроек: " & Err.Description, "AppConfig.LoadSettings", LogError
    LoadSettings = False
End Function

' Вспомогательная функция для загрузки значения
Private Function GetConfigValue(ByVal ws As Worksheet, ByVal SettingName As String, ByVal DefaultValue As Variant) As Variant
    Dim i As Long
    For i = 1 To 100 ' Ограничение для предотвращения бесконечного цикла
        If ws.Cells(i, 1).Value = SettingName Then
            GetConfigValue = ws.Cells(i, 2).Value
            Exit Function
        End If
    Next i
    
    ' Если настройка не найдена, возвращаем значение по умолчанию
    GetConfigValue = DefaultValue
End Function

' Свойства для доступа к настройкам
Public Property Get DataSheetName() As String
    DataSheetName = mDataSheetName
End Property

Public Property Get StartRow() As Long
    StartRow = mStartRow
End Property

Public Property Get EndRow() As Long
    EndRow = mEndRow
End Property

Public Property Get DataColumn() As Long
    DataColumn = mDataColumn
End Property

Public Property Get LogEnabled() As Boolean
    LogEnabled = mLogEnabled
End Property

Шаг 4: Обновите основную процедуру для использования новых компонентов

Sub AnalyzeData()
    On Error GoTo ErrorHandler
    
    LogMessage "Начало анализа данных", "AnalyzeData", LogInfo
    
    ' Использование конфигурации
    Dim config As New AppConfig
    If Not config.LoadSettings() Then
        LogMessage "Не удалось загрузить настройки, используем значения по умолчанию", "AnalyzeData", LogWarning
    End If
    
    ' Загрузка данных с использованием настроек
    Dim dataItems As Collection
    Set dataItems = LoadDataItems(config.DataSheetName, config.StartRow, config.EndRow, config.DataColumn)
    
    If dataItems.Count = 0 Then
        LogMessage "Данные не найдены", "AnalyzeData", LogWarning
        MsgBox "Данные не найдены"
        Exit Sub
    End If
    
    ' Анализ данных
    Dim total As Double
    Dim item As DataItem
    For Each item In dataItems
        If item.IsValid Then
            total = total + item.Value
        End If
    Next item
    
    LogMessage "Анализ завершен. Сумма: " & total, "AnalyzeData", LogInfo
    MsgBox "Сумма: " & total
    Exit Sub
    
ErrorHandler:
    HandleError Err.Number, Err.Description, "AnalyzeData"
End Sub

Критерии завершения Фазы 3

Улучшенная обработка ошибок с централизованным механизмом
Расширенное логирование с уровнями детализации
Использование конфигурационных параметров для гибкости приложения
Компоненты взаимодействуют через четко определенные интерфейсы
Каждое расширение проверено на соответствие требованиям

Фаза 4: Добавление интерфейсов и абстракций

На этом этапе, когда основная функциональность уже работает и протестирована, можно начать добавлять более продвинутые абстракции, если они действительно необходимы.

Шаг 1: Создайте интерфейс для логгера

' Интерфейс ILogger.cls
Option Explicit

' Определение методов интерфейса
Public Sub LogInfo(ByVal Message As String, Optional ByVal Source As String = "")
End Sub

Public Sub LogWarning(ByVal Message As String, Optional ByVal Source As String = "")
End Sub

Public Sub LogError(ByVal Message As String, Optional ByVal Source As String = "")
End Sub

Шаг 2: Реализуйте конкретный класс для работы с логами

' Класс ExcelLogger.cls
Option Explicit
Implements ILogger

' Реализация методов интерфейса ILogger
Private Sub ILogger_LogInfo(ByVal Message As String, Optional ByVal Source As String = "")
    LogMessage Message, Source, LogInfo
End Sub

Private Sub ILogger_LogWarning(ByVal Message As String, Optional ByVal Source As String = "")
    LogMessage Message, Source, LogWarning
End Sub

Private Sub ILogger_LogError(ByVal Message As String, Optional ByVal Source As String = "")
    LogMessage Message, Source, LogError
End Sub

Шаг 3: Создайте класс для управления анализом данных

' Класс DataAnalyzer.cls
Option Explicit

Private mLogger As ILogger
Private mConfig As AppConfig
Private mDataItems As Collection

' Инициализация с необходимыми зависимостями
Public Function Initialize(ByVal Logger As ILogger, ByVal Config As AppConfig) As Boolean
    On Error GoTo ErrorHandler
    
    Set mLogger = Logger
    Set mConfig = Config
    
    ' Загрузка данных
    Set mDataItems = LoadDataItems(mConfig.DataSheetName, mConfig.StartRow, mConfig.EndRow, mConfig.DataColumn)
    
    Initialize = (mDataItems.Count > 0)
    Exit Function
    
ErrorHandler:
    If Not mLogger Is Nothing Then
        mLogger.LogError "Ошибка инициализации анализатора: " & Err.Description, "DataAnalyzer.Initialize"
    End If
    Initialize = False
End Function

' Метод для выполнения анализа
Public Function PerformAnalysis() As Double
    On Error GoTo ErrorHandler
    
    If mDataItems.Count = 0 Then
        mLogger.LogWarning "Нет данных для анализа", "DataAnalyzer.PerformAnalysis"
        PerformAnalysis = 0
        Exit Function
    End If
    
    Dim total As Double
    Dim item As DataItem
    For Each item In mDataItems
        If item.IsValid Then
            total = total + item.Value
        End If
    Next item
    
    mLogger.LogInfo "Анализ завершен. Общая сумма: " & total, "DataAnalyzer.PerformAnalysis"
    PerformAnalysis = total
    Exit Function
    
ErrorHandler:
    mLogger.LogError "Ошибка при выполнении анализа: " & Err.Description, "DataAnalyzer.PerformAnalysis"
    PerformAnalysis = 0
End Function

Шаг 4: Обновите основную процедуру для использования классов

Sub AnalyzeData()
    On Error GoTo ErrorHandler
    
    ' Создание и настройка логгера
    Dim logger As New ExcelLogger
    
    ' Создание и загрузка конфигурации
    Dim config As New AppConfig
    If Not config.LoadSettings() Then
        logger.LogWarning "Не удалось загрузить настройки, используем значения по умолчанию", "AnalyzeData"
    End If
    
    ' Создание и инициализация анализатора
    Dim analyzer As New DataAnalyzer
    If Not analyzer.Initialize(logger, config) Then
        logger.LogError "Не удалось инициализировать анализатор", "AnalyzeData"
        MsgBox "Не удалось инициализировать анализатор"
        Exit Sub
    End If
    
    ' Выполнение анализа
    Dim result As Double
    result = analyzer.PerformAnalysis()
    
    ' Вывод результата
    MsgBox "Результат анализа: " & result
    Exit Sub
    
ErrorHandler:
    HandleError Err.Number, Err.Description, "AnalyzeData"
End Sub

Критерии завершения Фазы 4

Код организован с использованием интерфейсов и абстракций, но только там, где это необходимо
Каждый компонент имеет единственную четкую ответственность
Зависимости внедряются через параметры конструкторов или методов
Система остается простой для понимания и поддержки
Все функциональные требования реализованы и протестированы

Фаза 5: Оптимизация и рефакторинг

Эта фаза наступает только после того, как основная функциональность полностью реализована и протестирована.

Шаг 1: Проведите рефакторинг для устранения повторений

Ищите повторяющиеся фрагменты кода и выделяйте их в отдельные методы или утилитные функции.

Шаг 2: Оптимизируйте критические участки кода

Улучшайте производительность только после профилирования и выявления узких мест:

' Пример оптимизации загрузки данных
Public Function LoadDataItemsOptimized(ByVal SheetName As String, _
                                     ByVal StartRow As Long, _
                                     ByVal EndRow As Long, _
                                     ByVal DataColumn As Long) As Collection
    On Error GoTo ErrorHandler
    
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Sheets(SheetName)
    
    ' Загрузка данных одним вызовом для повышения производительности
    Dim dataRange As Range
    Set dataRange = ws.Range(ws.Cells(StartRow, DataColumn), ws.Cells(EndRow, DataColumn))
    Dim values As Variant
    values = dataRange.Value
    
    Dim items As New Collection
    Dim i As Long
    For i = LBound(values, 1) To UBound(values, 1)
        Dim item As New DataItem
        Set item = item.Create(values(i, 1))
        items.Add item
    Next i
    
    Set LoadDataItemsOptimized = items
    Exit Function
    
ErrorHandler:
    LogMessage "Ошибка при загрузке данных: " & Err.Description, "DataAccess.LoadDataItemsOptimized", LogError
    Set LoadDataItemsOptimized = New Collection
End Function

Шаг 3: Улучшите пользовательский интерфейс

На этом этапе можно добавить пользовательский интерфейс, если это необходимо:

' Пример создания простой формы для запуска анализа
Sub ShowAnalysisForm()
    ' Создание и отображение формы
    Dim frm As New UserForm1  ' Предполагается, что форма уже создана
    frm.Show
End Sub

Шаг 4: Проведите финальное тестирование

Тестирование всех критических сценариев
Тестирование производительности при различной нагрузке
Тестирование обработки исключительных ситуаций

Общие принципы поэтапной разработки

1. Двигайтесь от простого к сложному
Начинайте с минимальной функциональности
Постепенно добавляйте возможности
Тестируйте каждую новую функцию сразу после реализации
2. Откладывайте абстракции до последнего
Не создавайте абстракции на основе предположений
Вводите интерфейсы только когда их необходимость доказана
Помните: лучше написать прямой код, который работает, чем элегантную абстракцию, которая не работает
3. Тестируйте рано и часто
После написания каждого значимого блока кода тестируйте его
Простые тесты лучше, чем никаких тестов
Используйте логирование для отслеживания поведения системы
4. Практикуйте "эволюционную архитектуру"
Позвольте архитектуре развиваться естественно
Не фиксируйте все детали заранее, дайте системе "дышать"
Регулярно пересматривайте и при необходимости корректируйте направление
5. Приоритизируйте понятность над элегантностью
Простой и понятный код всегда лучше сложного и "умного"
Пишите код для людей, а не для компьютеров
Помните: код читается гораздо чаще, чем пишется

Заключение

Поэтапная разработка — это не просто подход к программированию, это философия, которая позволяет минимизировать риски, быстрее получать обратную связь и создавать более качественные и надежные приложения.

Начиная с минимальной работающей версии и постепенно наращивая функциональность, вы избегаете большинства проблем, связанных с чрезмерным усложнением и преждевременной оптимизацией. Ключевой принцип здесь — каждый шаг должен приводить к работающему приложению, пусть даже с ограниченной функциональностью.

Руководствуясь этим подходом, вы создадите код, который действительно делает то, что должен, а не просто выглядит красиво на бумаге.
